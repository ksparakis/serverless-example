stages:
  - check_main
  - install_dependencies
  - test
  - terraform_deploy
  - serverless_deploy

# ~~~~~~~~~~~~~~~~~~~ Base Jobs ~~~~~~~~~~~~~~~~~~~
.node:
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/mhart/alpine-node:14
  before_script:
    - export AWS_REGION=$AWS_DEFAULT_REGION
    - apk add jq
    - apk add py3-pip
    - apk add git
    - apk add bash
    - apk add openssh
    - apk add --update make
    - pip3 install --upgrade pip
    - pip3 install awscli
    - eval $(aws sts assume-role --role-arn "arn:aws:iam::$AWS_ACCOUNT_ID:role/DeploymentRole" --role-session-name terraform_deploy | jq -r '.Credentials | @sh "export AWS_SESSION_TOKEN=\(.SessionToken)\nexport AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey) "')
    - echo "@belong-gg:registry=https://gitlab.com/api/v4/projects/23409950/packages/npm/" > .npmrc
    - echo "@vindex-gg:registry=https://gitlab.com/api/v4/packages/npm/" >> .npmrc
    - echo "//gitlab.com/api/v4/projects/23409950/packages/npm/:_authToken=$NPM_TOKEN" >> .npmrc
    - echo "//gitlab.com/api/v4/packages/npm/:_authToken=$NPM_TOKEN" >> .npmrc
    - cp .npmrc ~/.npmrc

.node_cache:
  extends: .node
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/
    policy: pull

.node_deploy:
  extends: .node_cache
  script:
    - npx sls deploy  --stage $CI_ENVIRONMENT_NAME --region $AWS_REGION

.terraform:
  image:
    name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - apk add python3
    - apk add py3-pip
    - pip3 install --upgrade pip
    - pip3 install awscli
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com".insteadOf ssh://git@gitlab.com
    - cd infra
    - terraform init -backend-config=vars/${CI_ENVIRONMENT_NAME}_backend.tfvars

.terraform_plan_and_apply:
  extends: .terraform
  script:
    - terraform plan -var-file=vars/${CI_ENVIRONMENT_NAME}.tfvars -var cockroach_password=$SESSION_SVC_DB_PASSWORD
    - terraform apply -auto-approve -var-file=vars/${CI_ENVIRONMENT_NAME}.tfvars -var cockroach_password=$SESSION_SVC_DB_PASSWORD

# ~~~~~~~~~~~~~~~~~~~ Main Branch Commit Check ~~~~~~~~~~~~~~~~~~~
#check_main:
#  stage: check_main
#  script:
#    - apt install git
#    - git config --global user.email "gitlab@belong.gg"
#    - git config --global user.name "Mr. Robot"
#    - git fetch origin main
#    - |-
#      COUNT=$(git rev-list --right-only --count remotes/origin/$CI_COMMIT_BRANCH..remotes/origin/main)
#      if [[ $COUNT -gt 0 ]]; then
#        echo "ERROR - Branch is behind main by $COUNT commits. Please merge main to bring this branch up to date."
#        exit 1
#      else
#        exit 0
#      fi
#  rules:
#    - if : '$CI_COMMIT_BRANCH != "main" && $CI_MERGE_REQUEST_ID == null'

# ~~~~~~~~~~~~~~~~~~~ Install Dependencies Jobs ~~~~~~~~~~~~~~~~~~~
install_dependencies:
  stage: install_dependencies
  extends: .node
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/
  script:
    - npm ci
  rules:
    - if: '$CI_MERGE_REQUEST_ID == null'
      changes:
        - package-lock.json

# ~~~~~~~~~~~~~~~~~~~ Test/Verify Jobs ~~~~~~~~~~~~~~~~~~~
verify:
  stage: test
  extends: .node_cache
  script:
    - npm install npm-run-all
    - npm run verify

# ~~~~~~~~~~~~~~~~~~~ Deploy Jobs ~~~~~~~~~~~~~~~~~~~
Terraform Deploy:
  stage: terraform
  extends: .terraform_plan_and_apply
  environment:
    name: dev

Serverless Deploy:
  stage: deploy_dev
  extends: .node_deploy
  environment:
    name: dev
